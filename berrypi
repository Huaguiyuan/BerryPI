#!/usr/bin/env python
'''
The main program that should be run from a command line

  $ berrypi (options)

See

  $ berrypi -h

for details.
'''

import os, os.path
import sys, shutil, getopt
import time
import json
import subprocess
from decimal import Decimal
import numpy # math library
import re

import errorCheck as b_PyError
import parsing as b_PyParse
import submoduleProcess as b_PySubProcess
import calculations as b_PyCalc

import config
from config import BERRY_DEFAULT_CONSOLE_PREFIX as DEFAULT_PREFIX
from config import BERRY_FILE_EXTENSION, DEFAULT_BIN_PATH, DEFAULT_PYTHON_PATH

import mmn2pathphase


def changeToWorkingDirectory(path):
    os.chdir(path)

def postProcBerryPhase(configFile, phasesRaw, spCalc):
    '''
    Pass a config file to it in order to perform the final calculation
    on the simulation. Returns the main calculation as the class object
    '''
    #first, check to see if the folder contains all of the necessary files
    structurePath = configFile['Structure Path']
    changeToWorkingDirectory(configFile['Structure Path'])
    structName = configFile['Structure Name']
    print DEFAULT_PREFIX + "Performing main calculation on " + structName
    structFileExtensions = {
        'struct' : '.struct',
        'scf' : '.scf',
        'outputd' : '.outputd',
        'outputst' : '.outputst'
        }
    for extension in structFileExtensions.values():
        tempFilename = structName + extension
        #TODO change to a logging system
        print(DEFAULT_PREFIX + "Checking existance of {}").format(tempFilename)
        if not b_PyError.fileExists(tempFilename):
            print( DEFAULT_PREFIX + "{} does not exist, cannot finish calculation").format(tempFilename)
            exit(2)
        else: print DEFAULT_PREFIX + '-- OK'

    #perform the main calculation
    mainCalculation = b_PyCalc.MainCalculationContainer(
        phases = phasesRaw,
        sp = spCalc,
        orb = orbCalc,
        so = soCalc,
        kmesh = configFile['K-Mesh Divisions'],
        file_struct = structName + structFileExtensions['struct'],
        file_scf = structName + structFileExtensions['scf'],
        file_outputd = structName + structFileExtensions['outputd'],
        file_outputst = structName + structFileExtensions['outputst'],
        );
    finalPolarizationValue = mainCalculation()
    return mainCalculation
        

def rawBerryPhase(configFile):
    '''
    Runs the automation process. When a command fails, returns False,
    otherwise it returns True. This allows for several automation
    processes to be batched.
    '''
    print(DEFAULT_PREFIX + \
      "Starting BerryPI Automation for {}").format( \
      configFile['Structure Name'] );

    # get calculation parameters and options
    runLAPW = configFile['Perform LAPW']
    
    #get the starting directory and switch to it
    oldCurrentWorkingDirectory = os.getcwd()
    newWorkingDirectory = configFile['Structure Path']
    changeToWorkingDirectory(newWorkingDirectory)

    #ensure background env is also in the right directory
    os.system('cd ' + newWorkingDirectory)
    print DEFAULT_PREFIX + 'New working directory: ' + newWorkingDirectory

    # setup wien2k, berrypi path and python path
    w2kpath = os.getenv('WIENROOT')
    if w2kpath == "":
        print DEFAULT_PREFIX, 'ERROR: Unable to find the WIENROOT enviroment variable'
        print '             check the existance by executing "echo $WIENROOT"'
        print '             or set it up by "export WIENROOT=/path/to/wien2k"'
        sys.exit(2)
    else:
        print DEFAULT_PREFIX, 'w2kpath =', w2kpath
    pypath = os.getenv('BERRYPI_PYTHON', DEFAULT_PYTHON_PATH)
    if pypath == "":
        print DEFAULT_PREFIX, 'ERROR: Unable to find BERRYPI_PYTHON enviroment variable'
        print '             check the existance by executing "echo $BERRYPI_PYTHON"'
        print '             or set it up by "export BERRYPI_PYTHON=/path/to/python"'
        sys.exit(2)
    else:
        print DEFAULT_PREFIX, 'pypath =', pypath
    bppath = os.getenv('BERRYPI_PATH', DEFAULT_BIN_PATH)
    if bppath == "":
        print DEFAULT_PREFIX, 'ERROR: Unable to find BERRYPI_PATH enviroment variable'
        print '             check the existance by executing "echo $BERRYPI_PATH"'
        print '             or set it up by "export BERRYPI_PYTHON=/path/to/berrypi"'
        sys.exit(2)
    else:
        print DEFAULT_PREFIX, 'bppath =', bppath
    
    #check to make sure certain files exist
    structureName = configFile['Structure Name']
    tempFileName = structureName + '.struct'
    if not b_PyError.fileExists(tempFileName):
        string = DEFAULT_PREFIX + str(tempFileName)
        string += ' does not exist'
        print string
        print(DEFAULT_PREFIX + 'The [case].struct file has not been '+ \
            'found. BerryPI will now close ...');
        sys.exit(2)		
        return False

    #remove the broyd file
    #$rm $filename.broyd*  
    tempFileName = structureName + '.broyd*'
    broydRemoval = b_PySubProcess.VirtualShellInstance('rm -f ' + tempFileName)
    broydRemoval()


    ######################################
    # copy structure file                #
    # cp $filename.struct $filename.ksym #
    ######################################
    fileNameSrc = structureName + '.struct'
    fileNameDest = structureName + '.ksym'
    shutil.copy(fileNameSrc, fileNameDest)
    print(DEFAULT_PREFIX + "Copied " + fileNameSrc + " to " + fileNameDest)


    ################
    # execute kgen #
    ################
    if runLAPW:
        #get our input parameters from the configuration file
        numKpoints = configFile['Number of K-Points']
        numKDivisions = configFile['K-Mesh Divisions']
        kShift = configFile['K-Mesh Shift']
        #input is a string per line representation of each input for that particular file
        inputListing = [str(numKpoints),
                        reduce(lambda i,j: str(i) + ' ' + str(j), numKDivisions),
                        kShift,
                        ]
        shell_x_kgen = b_PySubProcess.VirtualShellInstance(
            'x', 'kgen', '-fbz',
            input=inputListing,
            ) # -fbz forces full BZ mesh
        try:
            shell_x_kgen.run()
        except subprocess.CalledProcessError, err:
            print DEFAULT_PREFIX + "ERROR: in automation of " + str(structureName) 
            print DEFAULT_PREFIX + "ERROR --> " + shell_x_kgen.getCommandString()
            print str(err)
            return False
    else:
        print DEFAULT_PREFIX + "Skip k-mesh generation, since you "+ \
            "opted for not performing LAPW.\n Proceed assuming that " + \
            "the proper k-mesh generated in the FULL BZ and vector "+ \
            "files were created in the previous run"
        print DEFAULT_PREFIX + "k-mesh will be read from case.klist file"
        f = open( str(structureName)+'.klist' , 'r' )
        for line in f:
            kmesh = re.findall( r'\(.*?\)' , line )
            kmesh2 = re.findall( r'\d+' , kmesh[0] )
            numKDivisions = map(int, kmesh2)
            print DEFAULT_PREFIX + "The following k-mesh will be used:", \
                numKDivisions;
            break
        f.close()


    ##########################################
    # cp $filename.klist $filename.klist_w90 #
    ##########################################
    shell_pathphase_y_copy = b_PySubProcess.VirtualShellInstance(
        'cp',
        str(structureName)+'.klist',
        str(structureName)+'.klist_w90',
        )
    try:
        shell_pathphase_y_copy()
    except subprocess.CalledProcessError, err:
        print DEFAULT_PREFIX + "ERROR: in automation of " + \
            str(structureName);
        print DEFAULT_PREFIX + "ERROR --> " + \
            shell_pathphase_y_copy.getCommandString();
        print str(err)
        return False


    #############################################################
    # Fake spin-polarized calculation if spin-orbit coupling is #
    # activated without spin polarization                       #
    # cp $filename.vsp $filename.vsp[up/dn]                     #
    # cp $filename.vns $filename.vns[up/dn]                     #
    #############################################################
    if soCalc and not spCalc:
        print DEFAULT_PREFIX + "Faking spin-polarized calculation..."
        for ext in ['.vsp', '.vns', '.scf2']:
            for spin in ['up', 'dn']:
                shell_pathphase_y_copy = \
                    b_PySubProcess.VirtualShellInstance(
                    'cp',
                    str(structureName) + ext,
                    str(structureName) + ext + spin,
                    );
                try:
                    shell_pathphase_y_copy()
                except subprocess.CalledProcessError, err:
                    print DEFAULT_PREFIX + "ERROR: in automation of " + \
                        str(structureName);
                    print DEFAULT_PREFIX + "ERROR --> " + \
                        shell_pathphase_y_copy.getCommandString();
                    print str(err)
                    return False

    ''' # 
    ###################
    # run orb -up/-dn #
    ###################
    if orbCalc and runLAPW: # spin polarized mode + orbital potential
        spOptions = ['-up', '-dn']
        for suffix in spOptions:
            shell_x_orb = b_PySubProcess.VirtualShellInstance(
                'x', 'orb', suffix
                )

            try:
                shell_x_orb()
            except subprocess.CalledProcessError, err:
                print DEFAULT_PREFIX + "ERROR: in automation of " + \
                    str(structureName);
                print DEFAULT_PREFIX + "ERROR --> " + \
                    shell_x_orb.getCommandString();
                print str(err)
                return False
    '''

    ''' (Parallel calculation is not implemented yet)
    ##################
    # Parallel mode? #
    ##################
    if pCalc:
        pOpt = '-p'
    else:
        pOpt = ''
    '''

    ##############################
    # run lapw1 (-up/-dn) (-orb) #
    ##############################
    if runLAPW:
        if spCalc or soCalc or orbCalc: # spin polarized mode
            spOptions = ['-up', '-dn']
        else: # regular (non-spin polarized calc.)
            spOptions = ' ' # need space here!
        for suffix in spOptions:
            #suffix = suffix + ' ' + pOpt # take care of parallel mode
            if orbCalc:
                suffix = suffix + ' ' + '-orb' # activate OP switch
            shell_x_lapw1 = b_PySubProcess.VirtualShellInstance(
                'x', 'lapw1', suffix
                );

            try: # [OLEG] implement an option for skipping lapw1
                shell_x_lapw1()
            except subprocess.CalledProcessError, err:
                print DEFAULT_PREFIX + "ERROR: in automation of " + str(structureName)
                print DEFAULT_PREFIX + "ERROR --> " + shell_x_lapw1.getCommandString()
                print str(err)
                return False
    else:
        print DEFAULT_PREFIX + "Skipping 'x lapw1'"


    #########################
    # run lapwso -up (-orb) #
    #########################
    if soCalc and runLAPW: # spin-orbit coupling ONLY
        suffix = '-up'
        #suffix = suffix + ' ' + pOpt # take care of parallel mode
        if orbCalc: # OP option
            suffix = suffix + ' ' + '-orb'

        shell_x_lapwso = b_PySubProcess.VirtualShellInstance(
            'x', 'lapwso', suffix
            )

        try:
            shell_x_lapwso()
        except subprocess.CalledProcessError, err:
            print DEFAULT_PREFIX + "ERROR: in automation of " + \
                str(structureName);
            print DEFAULT_PREFIX + "ERROR --> " + \
                shell_x_lapwso.getCommandString();
            print str(err)
            return False


    #############################################
    # Calculation to get the occupied blochBand #
    #############################################
    if spCalc or soCalc or orbCalc: # spin polarized mode
        print DEFAULT_PREFIX + "Determine number of bloch bands " + \
            "in spin-polarized mode based on *.scf2(up/dn)"
        spinList = ['up', 'dn'] # TODO: move this somewhere up
        blochBandSettings = [] # allocate array for the range of bands
        for spin in spinList: # loop over spins
            print DEFAULT_PREFIX + " "*2 + "spin = " + spin
            try:
                blochBandCalculation = \
                    b_PyCalc.CalculateNumberOfBands(structureName + \
                    '.scf2' + spin);
            except b_PyError.ParseError, err:
                print DEFAULT_PREFIX + "ERROR: in automation of " + \
                    str(structureName);
                print DEFAULT_PREFIX + str(err)
                print DEFAULT_PREFIX + "ERROR: missing tags: " + \
                    str(err.errorTags);
                return False
            if configFile['Bloch Band']:
        	      blochBandSettings = configFile['Bloch Band']
            else:
                blochBandRange = [ 1 , \
                    int(blochBandCalculation.getNumberOfBands()) ];
                print DEFAULT_PREFIX + " "*4 + \
                    "Number of bloch bands is {}".format(blochBandRange);
                blochBandSettings.append(blochBandRange)
    else: # regular (non-spin polarized calc.)
        print DEFAULT_PREFIX + "Determine number of bloch bands in non-sp mode"
        try:
            blochBandCalculation = \
                b_PyCalc.CalculateNumberOfBands(structureName + '.scf2');
            # it is better to take *.scf2 file instead of
        except b_PyError.ParseError, err:
            print DEFAULT_PREFIX + "ERROR: in automation of " + str(structureName) 
            print DEFAULT_PREFIX + str(err)
            print DEFAULT_PREFIX + "ERROR: missing tags: " + str(err.errorTags)
            return False
        if configFile['Bloch Band']:
    	      blochBandSettings = configFile['Bloch Band']
        else:
            blochBandSettings = [[ 1, \
                int(blochBandCalculation.getNumberOfBands()) ]];
            print DEFAULT_PREFIX + " "*4 + \
                "Number of bloch bands is {}".format(blochBandSettings);


    ###########################################
    # allocate an array for storing the pases #
    ###########################################
    if spCalc and not soCalc: # inludes -sp; -sp -orb, but not -so, -sp -so
        nkpt = numKDivisions[1]*numKDivisions[2]
        phaseX = numpy.zeros((2,nkpt,2)) # spin (up/dn), kpoint-path-start, phase
        nkpt = numKDivisions[0]*numKDivisions[2]
        phaseY = numpy.zeros((2,nkpt,2))
        nkpt = numKDivisions[0]*numKDivisions[1]
        phaseZ = numpy.zeros((2,nkpt,2))
    else: # non-spin polarized calc. or -so or -sp -so
        nkpt = numKDivisions[1]*numKDivisions[2]
        phaseX = numpy.zeros((1,nkpt,2)) # spin degenerate(1), kpoint-path-start, phase
        nkpt = numKDivisions[0]*numKDivisions[2]
        phaseY = numpy.zeros((1,nkpt,2))
        nkpt = numKDivisions[0]*numKDivisions[1]
        phaseZ = numpy.zeros((1,nkpt,2))

    ##############################################
    # THIS IS THE MAIN LOOP OVER SPINS AND BANDS #
    ##############################################
    # Prepare spin lables even for non-sp calculation
    if spCalc or soCalc or orbCalc: # spin-polar. calculation or -so
        spinIndexes = [0, 1] # 0 - up, 1 - dn
        spinLables = ["up", "dn"]
        spinOptions = ["-up", "-dn"]
        spOption = "-sp"
    else:# regular (non-spin polarized calc.)
        spinIndexes = [0]
        spinLables = [""] # use empty; brackets [] are for zip()
        spinOptions = [""]
        spOption = ""
    args = zip(spinIndexes, spinLables, spinOptions)
    for spinIndex, spinLable, spinOption in args: # LOOP OVER SPINS

        '''     (Parallel calculation is not implemented yet)
        ##########################################################
        # join vector files if parallel:                         #
        # join_vectorfiles [-up/-dn/-soup/-sodn] [-c] case NPROC #
        ##########################################################
        if pCalc: # parallel only
            suffix = ''
            if spCalc and not soCalc:
                suffix = suffix + spinOption
            elif
        '''

        ####################################
        # create input list for write_inwf #
        ####################################
        nb = blochBandSettings[spinIndex][1] # last occupied band
        inputListing = '-mode MMN -bands 1 ' + str(nb)


        ######################
        # execute write_inwf #
        ######################
        exe = 'write_inwf'
        shell_write_inwf = b_PySubProcess.VirtualShellInstance(
            pypath,
            w2kpath + '/' + exe,
            inputListing,
            )
        try:
            shell_write_inwf.run()
        except subprocess.CalledProcessError, err:
            print DEFAULT_PREFIX + "ERROR: in automation of " + str(structureName) 
            print DEFAULT_PREFIX + "ERROR --> " + shell_write_inwf.getCommandString()
            print str(err)
            return False


        #####################
        # execute write_win #
        #####################
        exe = 'write_win'
        shell_write_win = b_PySubProcess.VirtualShellInstance(
            exe,
            )
        case = str(structureName)
        fnameold = case + '.win'
        if os.path.isfile(fnameold): # remove old case.win if present
            print DEFAULT_PREFIX, fnameold, 'is present and will be removed'
            os.remove(fnameold)
            if not os.path.isfile(fnameold):
                print '             ... done'
            else:
                print DEFAULT_PREFIX, 'unable to remove', fnameold
                print '             will continue at your own risk, w2w may crash'
        try:
            shell_write_win()
        except subprocess.CalledProcessError, err:
            print DEFAULT_PREFIX + "ERROR: in automation of " + str(structureName) 
            print DEFAULT_PREFIX + "ERROR --> " + shell_write_win.getCommandString()
            print str(err)
            return False
        if not spinLable == "": # for spin-polarized calc.
            fnamenew = fnameold + spinLable
            shutil.copy(fnameold, fnamenew) # copy case.win to case.win[up/dn]


        #######################
        # execute win2nnkp.py #
        #######################
        shell_win2nnkp = b_PySubProcess.VirtualShellInstance(
                pypath,
                bppath + '/' + 'win2nnkp.py',
                str(structureName), # spinOption,
                )
        try:
            shell_win2nnkp()
        except subprocess.CalledProcessError, err:
            print DEFAULT_PREFIX + "ERROR: in automation of " + \
                  str(structureName) + suffix
            print DEFAULT_PREFIX + "ERROR --> " + \
                  shell_win2nnkp.getCommandString()
            print str(err)
            return False


        #####################
        # create case.fermi #
        #####################
        case = str(structureName)
        fname = case + '.scf2' + spinLable
        if os.path.isfile(fname): # check the presence of case.scf2
            print DEFAULT_PREFIX, 'file', fname, 'found; will extract the Fermi energy'
        else:
            print DEFAULT_PREFIX, 'ERROR: file', fname, 'not found'
            sys.exit(2)
        for line in open(fname):
            if ":FER" in line:
                print line.rstrip()
                break
        if not ":FER" in line:
            print DEFAULT_PREFIX, 'ERROR: unable to locate :FER line in', fname
            print 'you probably need to rerun LAPW2'
            sys.exit(2)
        Ef = line.split("=")[-1] # extract Fermi energy
        Ef = Ef.lstrip() # eliminate spaces
        Ef = Ef.rstrip() # remove end of line
        if not Ef == "": # check if string is not empty
            print DEFAULT_PREFIX, 'Ef =', Ef, 'Ry'
        else:
            print DEFAULT_PREFIX, 'ERROR: unable to determine the Fermi energy'
            print 'in line', line
            sys.exit(2)
        fname = case + '.fermi' + spinLable # write Fermi energy to case.fermi file
        if os.path.isfile(fname): # remove old case.fermi if present
            print DEFAULT_PREFIX, fname, 'is present and will be removed'
            os.remove(fname)
            if not os.path.isfile(fname):
                print '             ... done'
            else:
                print DEFAULT_PREFIX, 'unable to remove', fname
                print '             will continue at your own risk'
        file = open(fname, "w")
        file.write(Ef + '\n') # add end of line
        file.close()
        print DEFAULT_PREFIX, 'Fermi energy is written to', fname


        ###############
        # execute w2w #
        ###############
        if soCalc: # for spin-orbit call executables directly
            shell_w2w = b_PySubProcess.VirtualShellInstance( \
                'x w2w -so', spinOption );
        else:
            shell_w2w = b_PySubProcess.VirtualShellInstance( \
                'x w2w', spinOption );
        try:
            shell_w2w()
        except subprocess.CalledProcessError, err:
            print DEFAULT_PREFIX + "ERROR: in automation of " + str(structureName) 
            print DEFAULT_PREFIX + "ERROR --> " + shell_w2w.getCommandString()
            print str(err)
            return False


        ####################
        # execute w2waddsp #
        ####################
        if soCalc and spinLable=='dn': # spin-orbit last passage
            shell_csf = b_PySubProcess.VirtualShellInstance( \
                'x w2waddsp' );
            try:
                shell_csf()
            except subprocess.CalledProcessError, err:
                print DEFAULT_PREFIX + "ERROR: in automation of " + str(structureName) 
                print DEFAULT_PREFIX + "ERROR --> " + shell_csf.getCommandString()
                print str(err)
                return False


        ######################################################
        # Compute Berry phase:                               #
        # python ./mmn2pathphase.py case x/y/z (-up/-dn/-so) #
        ######################################################
        if soCalc and spinLable=='up':
            pass # spin-orbit skip first passage
        else:
            if soCalc:
                spinIndex = 0 # reset counter for proper writing below
            directions = ['x', 'y', 'z']
            for direction in directions:
                if not soCalc:
                    opt = spinOption
                else:
                    opt = '-so' # work around for spin-orbit
                args = [str(structureName), direction, opt]
                pathPhases = mmn2pathphase.main(args)
                if   direction == 'x':
    								phaseX[spinIndex,:,:] = pathPhases
                elif direction == 'y':
    								phaseY[spinIndex,:,:] = pathPhases
                elif direction == 'z':
    								phaseZ[spinIndex,:,:] = pathPhases
    # END OF THE MAIN LOOP FOR BERRY PHASE CALCULATION+++++++++++++++++++
    results = [phaseX,phaseY,phaseZ]

    ####################################################################
    # Clean up files intended to fake SP calculation if SO coupling is #
    # activated without spin polarization                              #
    # rm $filename.vsp[up/dn]                                          #
    # rm $filename.vns[up/dn]                                          #
    ####################################################################
    if soCalc and not spCalc:
        print DEFAULT_PREFIX + "Removing duplicated files..."
        for ext in ['.vsp', '.vns', '.scf2']:
            for spin in ['up', 'dn']:
                shell_pathphase_y_rm = \
                    b_PySubProcess.VirtualShellInstance(
                    'rm',
                    str(structureName) + ext + spin,
                    );
                try:
                    shell_pathphase_y_rm()
                except subprocess.CalledProcessError, err:
                    print DEFAULT_PREFIX + "ERROR: in automation of " + \
                        str(structureName);
                    print DEFAULT_PREFIX + "ERROR --> " + \
                        shell_pathphase_y_rm.getCommandString();
                    print str(err)
                    return False

    print DEFAULT_PREFIX + "Finished Berry phase computation for " + \
        structureName;

    return [True,results] # END rawBerryPhase


if __name__ == "__main__":
    def helpInfo():
        print '''

        DEPENDENCIES:
        - WIEN2k (tested against 13.1 Release 17/06/2013)
        - WIEN2WANNIER (tested against 0.97)
        - Python (tested against 2.7.4)
        - NumPy (tested against 1.6.2)

        Once you have all the dependencies installed.
        To run "BerryPI" after standard WIEN2k scf cycle run the following command

        berrypi -kNUM:NUM:NUM [+options see below]

        OPTIONS:

        -h

        Print this help

        --kdiv=NUM:NUM:NUM, -kNUM:NUM:NUM

        Determines the k-mesh for sampling the BZ

        Additional Switches:

        --spin-polarization, -s

        Activate spin polarized caclulation

        --orb-potential, -o

        Activate calculation with an additional orbit potential
        (e.g., LSDA+U)

        --spin-orbit, -j

        Activate spin orbit coupling

	      (option abandoned) --bloch-band=NUM:NUM, -bNUM:NUM

        Used to manually set the bloch band for band by band decomposition.
        By default, it is parsing out the bloch band based on the number
        of total bands.

        -l

        Skip lapw1 run. It assumes that the electronic phase calculation
        has been performed before and all the required files are for
        computaion of polarization is present and it just calculate the
        polarization based on those data. In this case the k-mesh will be
        read from case.klist file

        (option is not implemented yet) --parallel=NUM, -pNUM

        Enable parallel caulculation where it run "x lapw1" in parallel
        mode NUM should match to the number of cores to be used, since
        we need to call 'join_vectorfiles case NUM' from W2W package


        EXAMPLES:

        Run regular calculation with 6x6x4 k-mesh

        $ berrypi -k6:6:4

        Subsequent rerun of BerryPI in the same folder without changing
        k-mesh and skipping LAPW1

        $ berrypi -l

        Spin-polarized calculation

        $ berrypi -s -k6:6:4

        Spin-polarized calculation with spin-orbit coupling

        $ berrypi -s -j -k6:6:4
              
        Spin-polarized calculation with an additional orbital potential
        (no need for -s option since it is implicitly assumed)

        $ berrypi -o -k6:6:4
        '''
        pass

        
    try:
        opts, args = getopt.getopt(sys.argv[1:], \
            "S:hvp:nk:lb:soj", \
            ["help", "structure-name=", \
            "bloch-band=", "spin-polarized", "no-auto", "kdiv=", "no-lapw1", \
            "parallel=", "verbose", "orb-potential", "spin-orbit"]);
    except getopt.GetoptError, err:
        # print help information and exit:
        print helpInfo()
        print "ERRORR"
        print str(err) # will print something like "option -a not recognized"
        sys.exit(2)

    bppath = os.getenv('BERRYPI_PATH') # get path to BerryPI 
    with open(bppath+'/version.info', 'r') as versionFile: # open version file
        print DEFAULT_PREFIX + versionFile.read()
    print DEFAULT_PREFIX + "Python version: " + sys.version[:5]
    print DEFAULT_PREFIX + "Numpy version: " + numpy.version.version

    #boolean for whether to check config for
    #configuration dicts
    checkConfig = True

    #boolean for whether to automate the entire process
    checkAuto = True



    #defaults
    structure_name = ''
    structure_path = ''
    structure_kmesh = config.DEFAULT_KMESH_DIVISIONS
    structure_bloch = None
    runLAPW = True
    VERBOSE = False

    helpOpt = False
    pCalc = False   # calculation is serial by defaul
    spCalc = False  # no spin polarization by default
    orbCalc = False # no additional orbital potential by default
    soCalc = False  # nos spin-orbit coupling by default
    
    # Set default case name and path based on where berrypi is executed
    structure_path = os.getcwd()
    structure_name = os.path.split(os.getcwd())[-1]

    #begin checking command line arguments
    for argName, argValue in opts:

        #help option
        if argName in ("-h", "--help"):
            print helpInfo()
	    helpOpt = True
            sys.exit(0)

        #structure name option
        elif argName in ('-S', '--structure-name'):
            structure_name = argValue

        #enable spin polarization
        elif argName in ('-s', '--spin-polarized'):
            print(DEFAULT_PREFIX+'Spin polarization is activated')
            spCalc = True

        #enable orbital potential
        elif argName in ('-o', '--orb-potential'):
            print(DEFAULT_PREFIX+'Calculation with an additional '+ \
                'orbital potential is activated');
            orbCalc = True
            print(DEFAULT_PREFIX+'Spin polarization is activated '+ \
                'automatically with adding orbital potential')
            spCalc = True

        #enable spin orbit coupling
        elif argName in ('-j', '--spin-orbit'): # [OLEG] here
            print(DEFAULT_PREFIX+'Calculation with spin-orbit '+ \
                'coupling is activated');
            soCalc = True

        #automation disabling option
        elif argName in ('-n', '--no-auto'):
            checkAuto = False

        # k-mesh
        elif argName in ('-k', '--kdiv'):
            try: structure_kmesh = [ int(i) for i in argValue.split(':') ] 
            except ValueError:
                print('Value Error: Please enter the integers '+\
                    'into kmesh in the format of "-kx:x:x"');
                sys.exit(2)      

        #Determines whether you should include lapw1 in the automation
        elif argName in ('-l', '--no-lapw'):
            runLAPW = False

        #Determines whether to run lapw1 in parallel on the clustrer
        elif argName in ('-p', '--parallel'):
            print DEFAULT_PREFIX+"Parallel iption is not "+ \
                "yet implemented. Proceed in the serial mode.";
            pCalc = False # turn to True when implementation finished
            npParal = argValue # number of parallel processes

        elif argName in ('-b', '--bloch-band'):
            print DEFAULT_PREFIX+"Option band-by-band decomposition "+ \
                "was abandoned. All occupied bands will be considered.";
	    structure_bloch = [ int(i) for i in argValue.split(':') ]

        elif argName in ('-v', '--verbose'):
            VERBOSE = True
        else:
            print("Invalid argument {} - {}").format(argName, argValue)
            sys.exit(2)

    if not helpOpt and checkAuto:
        try:
            structure_kmesh # check if k-mesh defined in input param.
        except NameError: # k-mesh is not defined, ask for input
            k_mesh_values=raw_input('What kmesh values would you like? '+ \
                '(e.g. 2:2:2)\n');
            try: structure_kmesh = [ int(i) for i in k_mesh_values.split(':') ] 
            except ValueError:
                print('Value Error: Please enter the integers into '+ \
                    'kmesh in the format of "x:x:x"');
                sys.exit(2)
        else:
            print DEFAULT_PREFIX+'Proceed with the k-mesh', \
                structure_kmesh;

    #Makes sure that the length of the tuple is 3
    if len(structure_kmesh)!=3:
	print('You entered: ' +str(structure_kmesh))
        print('Error: Please check that you have 3 constants in the kmesh')
        sys.exit(2)

    #Makes sure that there are no values of 0 in the kmesh
    elif 0 in structure_kmesh:
	print('You entered: ' + str(structure_kmesh))
        print('Error: Cannot have a dimension of 0 in the kmesh')
        sys.exit(2)
		
    #Sets the lower bound of the dimensions
    elif min(structure_kmesh)<0:
        print('You cannot have negative integers as kmesh values')
        sys.exit(2)
		
     #Determines the upper size limit of the kmesh
    elif max(structure_kmesh)>10:
        print('Calculations with a dimension of more than 10 will take a long time to calculate. Are you sure you want to continue?')

        check_10 = raw_input('Type in "Y" to continue or press any other button to exit\n')

        if check_10=='Y':
            pass
        else:
            sys.exit(2)
			
    #Determines whether or not W2WANNIER is installed
    try:
        with open('/act/W2WANNIER/util/w2w'): pass
    except IOError:
        print('Please make sure that W2W is installed before trying to run BerryPI')
		
    #if configuration values are provided, create config file to pass
    #to the automation and calculations
    if structure_name or structure_path:
        if structure_name and structure_path:
            #follows same format as config.py configurations
            configFile = {
                'Structure Name' : structure_name,
                'Structure Path' : structure_path,
                'Number of K-Points' : config.DEFAULT_NUMBER_OF_KPOINTS,
                'K-Mesh Divisions' : structure_kmesh,
                'K-Mesh Shift' : config.DEFAULT_KMESH_SHIFT, 
                'Bloch Band' : structure_bloch,
                'Number of Wannier Functions' : config.DEFAULT_WANNIER_FUNCTIONS,
                'Center Atom and Character' : config.DEFAULT_CENTER_ATOM_AND_CHARACTER,
                'Perform LAPW' : runLAPW,
                'Parallel mode' : pCalc,
                'Spin polarized calculation' : spCalc,
                'Add orbital potential' : orbCalc,
                'Spin-orbit coupling' : soCalc,
                }
            checkConfig = False
        else:
            print "structure name and structure path must be provided"
            raise getopt.GetoptError

    #check config (based on if structure name or
    #structure path has been passed to berryPyRunAutomation.py)
    bAutomationErrorChk = True
    if checkConfig:
        ConfigurationFiles = config.berryPyConfigAutomationList
        for berryConfig in ConfigurationFiles:
            #check whether to automate
            if checkAuto:
                bAutomationErrorChk = rawBerryPhase(berryConfig)
            if bAutomationErrorChk:
                try:
                    theCalc = postProcBerryPhase(berryConfig)
                except b_PyError.ParseError, err:
                    print DEFAULT_PREFIX + "ERROR: in automation of " + \
                        berryConfig['Structure Name'];
                    print DEFAULT_PREFIX + str(err)
                    print DEFAULT_PREFIX + "ERROR: missing tags: " + \
                        str(err.errorTags);
                    continue
                #write to file
                writeResult(berryConfig, theCalc)
    else:
        #assuming the configFile was passed correctly
        if checkAuto:
            [bAutomationErrorChk,phasesRaw] = rawBerryPhase(configFile)
        if bAutomationErrorChk:
            try:
                theCalc = postProcBerryPhase(configFile,phasesRaw,spCalc)
            except b_PyError.ParseError, err:
                print DEFAULT_PREFIX + "ERROR: in automation of " + \
                    configFile['Structure Name'];
                print DEFAULT_PREFIX + str(err)
                print DEFAULT_PREFIX + "ERROR: missing tags: " + \
                    str(err.errorTags);
    
    
	  # Final remarks
    bppath = os.getenv('BERRYPI_PATH') # get path to BerryPI 
    with open(bppath+'/version.info', 'r') as versionFile: # open version file
        print "\nCompleted using BerryPI version:", versionFile.read()
    print '''
Suggested reference:
    S.J.Ahmed, J.Kivinen, B.Zaporzan, L.Curiel, S.Pichardo and O.Rubel
    Comp. Phys. Commun. 184, 647 (2013)

Questions and comments are to be directed to
    Dr. Oleg Rubel 
    Lakehead University
          and
    Thunder Bay Regional Research institute
    290 Munro Street, Thunder Bay, ON Canada P7A 7T1
    Tel: +1 (807) 766-3350 
    E-mail: rubelo@tbh.net
    URL: http://www.tbrri.com/~orubel
or
    Dr. Samuel Pichardo 
    Lakehead University
          and
    Sunnybrook Health Science Centre
    2075 Bayview Avenue, Toronto, ON Canada M4N 3M5 
    Tel: +1 (416) 480-6156
    E-mail: spichard@lakeheadu.ca
    URL: http://www.proteus-mrighifu.net'''
